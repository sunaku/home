bind-key R source ~/.tmux.conf \; display-message 'config reloaded!'

#-----------------------------------------------------------------------------
# terminal
#-----------------------------------------------------------------------------

# auto-set terminal title to current window pane's title
set-option -g set-titles on

# enable 256-color support for pretty colorschemes in Vim
set-option -g default-terminal 'screen-256color'

# allow Vim to recieve modifier keys: Shift, Control, Alt
set-window-option -g xterm-keys on

# prevent tmux from catching modifier keys meant for Vim
set-option -s escape-time 1

# allow set-titles to change the window title under XTerm
# http://opennomad.com/content/goodbye-screen-hello-tmux
set-option -ag terminal-overrides 'xterm*:XT'

# prevent standout from appearing as italics under URxvt
# http://comments.gmane.org/gmane.comp.terminal-emulators.tmux.user/1927
set-option -ag terminal-overrides 'rxvt-unicode*:sitm@'

#-----------------------------------------------------------------------------
# appearance
#-----------------------------------------------------------------------------

# Colors from the "lucius" and "bubblegum" themes in the vim-airline plugin:
# https://github.com/bling/vim-airline/blob/master/autoload/airline/themes/lucius.vim
# https://github.com/bling/vim-airline/blob/master/autoload/airline/themes/bubblegum.vim
set-option -g pane-border-fg colour237 # lucius normal airline_c
set-option -g pane-border-bg colour237 # lucius normal airline_c
set-option -g pane-active-border-fg colour241 # lucius normal airline_b
set-option -g pane-active-border-bg colour241 # lucius normal airline_b
set-option -g status-fg colour188 # lucius normal airline_c
set-option -g status-bg colour238 # lucius normal airline_c
set-window-option -g window-status-current-fg colour236 # bubblegum normal airline_a
set-window-option -g window-status-current-bg colour146 # bubblegum s:cterm_purple

# Common UI interaction cues from Blueprint CSS:
# http://blueprintcss.org/tests/parts/forms.html
set-option -g message-fg '#514721' # notice (yellow)
set-option -g message-bg '#ffd324' # notice (yellow)
set-window-option -g mode-fg '#514721' # notice (yellow)
set-window-option -g mode-bg '#ffd324' # notice (yellow)
set-window-option -g window-status-bell-fg '#d5edf8' # info (blue)
set-window-option -g window-status-bell-bg '#205791' # info (blue)
set-window-option -g window-status-content-fg '#e6efc2' # success (green)
set-window-option -g window-status-content-bg '#264409' # success (green)
set-window-option -g window-status-activity-fg '#fbe3e4' # error (red)
set-window-option -g window-status-activity-bg '#8a1f11' # error (red)

#-----------------------------------------------------------------------------
# status bar
#-----------------------------------------------------------------------------

# toggle status bar visibility
bind-key -n M-` set-option -g status

# put status bar at the top of the screen
set-option -g status-position top

# list windows on left side of status bar
set-option -g status-left ''
set-option -g status-left-length 0

# make window list easier to scan
set-window-option -g window-status-format         ' #[bold]#I#F#[nobold]#W '
set-window-option -g window-status-current-format ' #[bold]#I#F#[nobold]#W '
set-window-option -g window-status-separator ''

# show pane title, pane identifier, and hostname on right side of status bar
set-option -g status-right '#{=26:pane_title} #[fg=colour150,bg=colour236] #S:#I.#P #(test -n "$SSH_TTY" && echo "\#[reverse] #H ")'
set-option -g status-right-length 48

#-----------------------------------------------------------------------------
# windows
#-----------------------------------------------------------------------------

# create window
bind-key -n M-e command-prompt "new-window -n '%%'"
bind-key -n M-E command-prompt -I '#W' "rename-window '%%'"

# focus window
set-option -g mouse-select-window on
bind-key -n M-, previous-window
bind-key -n M-. next-window
bind-key -n M-o last-window

# focus by number
set-option -g base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on
bind-key -n M-0 choose-window
bind-key -n M-1 select-window -t :1
bind-key -n M-2 select-window -t :2
bind-key -n M-3 select-window -t :3
bind-key -n M-4 select-window -t :4
bind-key -n M-5 select-window -t :5
bind-key -n M-6 select-window -t :6
bind-key -n M-7 select-window -t :7
bind-key -n M-8 select-window -t :8
bind-key -n M-9 select-window -t :1 \; select-window -t :-1

# swap window
bind-key -n M-< swap-window -t :-1
bind-key -n M-> swap-window -t :+1

# monitor window
bind-key -n M-k set-window-option monitor-activity
bind-key -n M-q command-prompt -p 'monitor-silence (seconds)' -I 0 'set-window-option monitor-silence %%'
bind-key -n M-j command-prompt -p 'monitor-content (fnmatch)' "set-window-option monitor-content '%%'"
bind-key -n M-J set-window-option monitor-content

#-----------------------------------------------------------------------------
# panes
#-----------------------------------------------------------------------------

# create pane
bind-key -n M-c split-window -c '#{pane_current_path}'
bind-key -n M-C split-window -c '#{pane_current_path}' \; run-shell 'tmux last-pane \; swap-pane -d -s #D'
bind-key -n M-r split-window -c '#{pane_current_path}' -h
bind-key -n M-R split-window -c '#{pane_current_path}' -h \; run-shell 'tmux last-pane \; swap-pane -d -s #D'

# join pane
bind-key -n M-g move-pane -d -s .+1 -t .    # put next pane at bottom
bind-key -n M-G move-pane -d -s .+1 -t . -h # put next pane at right
bind-key -n M-l move-pane    -t .-1 -s .    # put at bottom of prev pane
bind-key -n M-L move-pane    -t .-1 -s . -h # put at right of prev pane

# focus pane or Vim split (if pane running Vim)
# http://robots.thoughtbot.com/post/53022241323
bind-key -n M-d select-pane -l
bind-key -n M-h if-shell 'test "#{pane_current_command}" = vim' 'send-keys M-h' 'select-pane -L'
bind-key -n M-t if-shell 'test "#{pane_current_command}" = vim' 'send-keys M-t' 'select-pane -U'
bind-key -n M-n if-shell 'test "#{pane_current_command}" = vim' 'send-keys M-n' 'select-pane -D'
bind-key -n M-s if-shell 'test "#{pane_current_command}" = vim' 'send-keys M-s' 'select-pane -R'
set-option -g mouse-select-pane on

# resize pane
bind-key -r H resize-pane -L 5
bind-key -r T resize-pane -U 5
bind-key -r N resize-pane -D 5
bind-key -r S resize-pane -R 5
set-option -g mouse-resize-pane on

# zoom pane
bind-key -n M-m resize-pane -Z

# swap pane
bind-key -n M-- swap-pane -D
bind-key -n M-_ swap-pane -U
bind-key -n M-D run-shell 'tmux select-pane -l \; swap-pane -d -s #D'
bind-key -n M-H run-shell 'tmux select-pane -L \; swap-pane -d -s #D'
bind-key -n M-T run-shell 'tmux select-pane -U \; swap-pane -d -s #D'
bind-key -n M-N run-shell 'tmux select-pane -D \; swap-pane -d -s #D'
bind-key -n M-S run-shell 'tmux select-pane -R \; swap-pane -d -s #D'

# attach by number
bind-key -n 'M-!' join-pane -t :1
bind-key -n 'M-@' join-pane -t :2
bind-key -n 'M-#' join-pane -t :3
bind-key -n 'M-$' join-pane -t :4
bind-key -n 'M-%' join-pane -t :5
bind-key -n 'M-^' join-pane -t :6
bind-key -n 'M-&' join-pane -t :7
bind-key -n 'M-*' join-pane -t :8
bind-key -n 'M-(' run-shell 'tmux select-window -t :1 \; select-window -t :-1 \; join-pane -s "#{pane_id}"'
bind-key -n 'M-)' choose-window 'join-pane -t "%%"'

# promote pane (toggle)
bind-key -n M-Enter if-shell 'test #P -ne 1' 'select-pane -t 1' 'last-pane; swap-pane -s 1'

# rotate panes
bind-key -n M-a rotate-window -D
bind-key -n M-A rotate-window -U

#-----------------------------------------------------------------------------
# layouts
#-----------------------------------------------------------------------------

bind-key -n M-w select-layout main-horizontal
bind-key -n M-W select-layout even-vertical
bind-key -n M-v select-layout main-vertical
bind-key -n M-V select-layout even-horizontal
bind-key -n M-z select-layout tiled

# main-horizontal layout with the main pane occupying half of the screen
bind-key -n M-w select-layout main-horizontal \; run-shell 'tmux resize-pane -t 1 -y $(expr #{window_height} / 2)'

# main-vertical layout with the main pane occupying half of the screen
bind-key -n M-v select-layout main-vertical \; run-shell 'tmux resize-pane -t 1 -x $(expr #{window_width} / 2)'

#-----------------------------------------------------------------------------
# scrollback buffer
#-----------------------------------------------------------------------------

# buffer length
set-option -g history-limit 32767

# search buffer using copy mode
bind-key -n M-/ copy-mode \; send-keys ?

# search buffer using Vim or less
bind-key -n M-? capture-pane -S -32767 -J \; new-window -a ' \
  tmux save-buffer - \; delete-buffer | {                    \
    vim -R -c "set nofen is hls ic" -;                       \
    test $? -eq 127 && less;                                 \
  };                                                         \
' \; send-keys G ? # go to bottom of capture and search upward

# scroll buffer
# NOTE: set "URxvt.saveLines: 0" in ~/.Xdefaults to make Shift+PageUp bindable
# NOTE: see http://aperiodic.net/screen/interface for doing the same in XTerm
bind-key -n S-PPage copy-mode -u

# copy text from buffer
bind-key -n M-u copy-mode
set-window-option -g mode-keys vi
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy C-V rectangle-toggle
bind-key -t vi-copy y copy-selection
set-window-option -g mode-mouse on

# paste copied text
bind-key -n M-i paste-buffer

# transfer copied text to attached terminal with yank:
# https://github.com/sunaku/home/blob/master/bin/yank
bind-key -n M-y run-shell 'tmux save-buffer - | yank > #{pane_tty}'
