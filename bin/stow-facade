#!/bin/sh -eu
#
# Usage: stow-facade [-v] DIRECTORY...
#
# Builds a stow(1) friendly facade of symlinks for each DIRECTORY.
#
# Each facade is built inside the current working directory and is
# designed to expose only the relevant Linux Filesystem Hierarchy:
# http://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/usr.html
#
# Pass `-v` flag to enable verbose mode for underlying ln(1) tool.
#
# Written in 2017 by Suraj N. Kurapati <https://github.com/sunaku>

case "${1:-}" in (-*) flags=$1; shift;; (*) flags=;; esac

symlink() {
  source=$1
  target=$2
  symlink=$(realpath --relative-to="$target" "$source") || symlink=$source
  ln -sf $flags "$symlink" "$target"
}

for DIRECTORY; do
  stowable=${DIRECTORY##*/}

  # extracted AppImage squashfs
  if test -x "$DIRECTORY"/AppRun -a -d "$DIRECTORY"/usr; then
    DIRECTORY=$DIRECTORY/usr
  fi

  # expose standard directories
  for folder in bin sbin lib lib64 include share; do
    linkable=$DIRECTORY/$folder
    if test -d "$linkable"; then
      mkdir -vp "$stowable"
      symlink "$linkable" "$stowable"
    fi
  done

  # expose loose documentation
  shareable=$stowable/share
  if ! test -L "$shareable"; then
    for folder in man info doc; do
      linkable=$DIRECTORY/$folder
      if test -d "$linkable"; then
        mkdir -vp "$shareable"
        symlink "$linkable" "$shareable"
      fi
    done
  fi

  # expose loose executables
  executable=$stowable/bin
  if ! test -L "$executable"; then
    for linkable in "$DIRECTORY"/*; do
      if test -f "$linkable" -a -x "$linkable"; then
        mkdir -vp "$executable"
        symlink "$linkable" "$executable"
      fi
    done
  fi
done
