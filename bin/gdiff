#!/usr/bin/env ruby
#
# MiniTest runs this command to show the differences between expected and
# actual values in assert_equal(), so we make it word-aware and colorful.
#
# You can make this script use blue instead of green by setting the COLORBLIND
# environment variable, as described at https://pypi.python.org/pypi/fragments
#
# See http://sunaku.github.io/minitest-colordiff.html for more information.
#

require 'shellwords'

FILE_BEGIN_REGEXP = /\A\e\[1mdiff/
HUNK_BEGIN_REGEXP = /(?=^\e\[36m@@)/

# highlight the different inside changed lines while keeping unified output
linewise_diff = `git diff --color=always #{ARGV.shelljoin} |
perl /usr/share/doc/git/contrib/diff-highlight/diff-highlight`

linewise_hunks = linewise_diff.split(HUNK_BEGIN_REGEXP)

# squash common portions of changed lines and only highlight the differences
# http://neurotap.blogspot.com/2012/04/character-level-diff-in-git-gui.html
charwise_diff = `git diff --color=always --color-words \
--word-diff-regex='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+' #{ARGV.shelljoin}`

charwise_hunks = charwise_diff.split(HUNK_BEGIN_REGEXP).map do |hunk|
  # nullify character-wise diffs that don't give any whitespace information
  if hunk =~ /\S\e\[3[12]m.*?\e\[m/
    # highlight headers to indicate that these character-wise diffs are
    # alternate representations of the line-wise diffs that precede them
    # and also highlight the changes themselves in character-wise diffs
    hunk.gsub(/\A\e\[36(?=m@@)|\e\[3[12](?=m.*?\e\[m)/, '\&;7')
  end
end

# combine the diffs by joining the charwise output into the linewise output
# and use uniq() to show only one copy of common hunks between both outputs
diff = linewise_hunks.zip(charwise_hunks).map(&:uniq).flatten.map do |hunk|
  if hunk =~ FILE_BEGIN_REGEXP
    # strip diff headers and git index headers which mention /tmp/* files
    hunk.sub(/\A.+\bexpect.+\bbutwas.+\n\e\[1mindex.+\n/, '').

    # provide human-friendly descriptions of MiniTest value assertions
    sub(/(?<=m-{3}\s)\S+?\bexpect\S+/,  'I expected it to be...').
    sub(/(?<=m\+{3}\s)\S+?\bbutwas\S+/, 'but it actually was...').

    # color-code file headers according to difference highlighting colors
    sub(/^\e\[1(?=m-{3})/, '\&;31').sub(/^\e\[1(?=m\+{3})/, '\&;32')
  else
    hunk
  end
end.join

# use blue instead of green for users who indicate that they are colorblind
diff = diff.gsub(/(\e\[[\w;]*\b3)2m/, '\14m') if ENV['COLORBLIND']

print diff
