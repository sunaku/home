#!/bin/sh -u
#
# Setup: apt-get install inotify-tools
#
# Usage: inotifytest-elixir-mix [ARGUMENTS_FOR_MIX_TEST...]
#
# When *.exs files in or beneath lib/ or test/ are modified, this script runs
# their corresponding test/*test.exs files and prints any errors or failures.
# If any other test/*.exs file is modified, then all available tests are run.
#
# Written in 2014 by Suraj N. Kurapati <https://github.com/sunaku>

notice() { printf '\033[34m%s\033[0m\n' "$@" ;}

map_file_to_test() { file=$1
  case "$file" in # support for umbrella applications
    (apps/*/lib/*)  leaf=lib/${file#apps/*/lib/}   ;;
    (apps/*/test/*) leaf=test/${file#apps/*/test/} ;;
    (*)             leaf=$file                     ;;
  esac
  stem=${file%$leaf}

  case "$leaf" in
    (lib/*.ex|lib/*.exs) test=test${leaf#lib}
                         test=${test%.*}_test.exs ;; # perform the mapping
    (test/*test.exs)     test=$leaf               ;; # file is test itself
    (test/*.exs)         test=                    ;; # file is test helper
    (*)                  return 1                 ;; # file not recognized
  esac
  test=$stem$test

  test -n "$test" -a -f "$test" && echo "$test" || : # print only if exist
}

notice "Ready to test...  (Save a file to test it!)"
test_exit_status=0
inotifywait -rqme close_write --format '%w%f' $(
  ls -d apps/*/lib/ apps/*/test/ lib/ test/ 2>/dev/null
) | while read -r changed_file; do {

  changed_file_test=$(map_file_to_test "$changed_file") || continue

  test $test_exit_status -eq 0 && clear
  printf '\033[33m%s -> \033[36m%s\033[0m\n' \
    "$(date -r "$changed_file" '+%X')" "$changed_file"

  notice 'Building ...'
  compiled_files=$(
    MIX_ENV=test mix compile --verbose | tee /dev/tty |
    awk '/^==> / {
           subdir = "apps/" $2 "/"
           if (system("test -e " subdir) != 0) {
             subdir = ""
           }
         }
         /^Compiled .+\.ex$/ { print subdir $2 }
         /^== / { error = 1 } END { exit error }'
  ) || continue

  compiled_file_tests=$(
    for compiled_file in $compiled_files; do
      map_file_to_test "$compiled_file"
    done
  )

  notice 'Testing...'
  mix test "$@" $changed_file_test
  test_exit_status=$?

  if test $test_exit_status -eq 0 -a -n "$compiled_file_tests"; then
    notice 'Testing dependent files...'
    mix test "$@" $compiled_file_tests
    test_exit_status=$?
  fi

  if test $test_exit_status -eq 0; then
    notice 'Passed (^_^) Good work!'
  else
    notice 'Failed (e_e) Try again!'
  fi

} </dev/null
done
